//Helper: shuffle an array
function shuffle(array) {
  for (var i = array.length - 1; i > 0; --i) {
    var j = Math.floor(Math.random() * (i + 1));
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
}

//Helper: check if 2 arrays are the same
function arraysEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length !== b.length) return false;

  for (var i = 0; i < a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}

//returns a random number generated by a truncated normal distribution
function normal(mean, std, left_trunc, right_trunc) {
  var u = 0,
    v = 0;
  while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)
  while (v === 0) v = Math.random();
  let result = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
  result *= std;
  result += mean;
  if (result < left_trunc) result = left_trunc;
  if (result > right_trunc) result = right_trunc;
  return result;
}

//Helper: Better rounding
function roundBetter(num, place) {
  let mod = Math.pow(10, place);
  return Math.round(num * mod + Math.sign(num) * 0.1 ** (17 - 2 - (Math.round(num * mod) / mod).toString().length)) / mod;
}

//functions for the prequestions
function preQuestions(qNum) {
  if (qNum == window.expParam.prequestions.length) {
    setTimeout(function(){
      startExp();
    }, 500);
  } else {
    let question = window.expParam.prequestions[qNum],
      html = '',
      keys = ['enter'];
    if (question.type == 'textbox') {
      html = '<form action="" class="formName">' +
        '<div class="form-group">' +
        '<label>' +
        question.question + '</label>' +
        '<input type="text" placeholder="' +
        question.placeholder +
        '" class="textAnswer" required />' +
        '</div>' +
        '</form>'
    } else if (question.type == 'choice') {
      html = question.question + '<br>';
      for (var i = 0; i < question.choices.length; i++) {
        if (question.choices[i].toLowerCase() != 'other') {
          html += '<label class="radioContainer">' +
            question.choices[i] +
            '<input type="radio" name="radio"> <span class="checkmark"></span> </label>'
        } else {
          html += '<label class="radioContainer" onclick="otherRadioClick()"><input type="radio" name="radio"><label>Other: <input type="text" class="radioOther"></label><span class="checkmark"></span> </label>'
        }
      }
    } else if (question.type == 'text') {
      html = question.question;
    } else if (question.type == 'specialKey') {
      keys = ['p', 'q'];
      html = question.question;
    }
    $.confirm({
      title: question.title,
      content: html,
      type: 'blue',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      buttons: {
        formSubmit: {
          text: 'Next',
          btnClass: 'btn-blue',
          keys: keys,
          action: function() {
            if (question.type == 'textbox') {
              var textAns = this.$content.find('.textAnswer').val();
              if (!textAns) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please provide a valid answer',
                  type: 'red',
                });
                return false;
              } else {
                window.expData.preQuestions.push({
                  question: question.title,
                  answer: textAns
                });
                preQuestions(qNum + 1);
              }
            } else if (question.type == 'choice') {
              var radioList = this.$content.find($('.radioContainer'));
              for (var j = 0; j < radioList.length; j++) {
                if (radioList[j].getElementsByTagName('input')[0].checked) {

                  if (question.choices[j].toLowerCase() != 'other') {
                    window.expData.preQuestions.push({
                      question: question.title,
                      answer: question.choices[j]
                    });
                  } else if (this.$content.find('.radioOther').val().length == 0) {
                    $.alert({
                      title: 'Error',
                      boxWidth: '25%',
                      useBootstrap: false,
                      content: 'If you select other, please do not leave it blank.',
                      type: 'red',
                    });
                    return false;
                  } else {
                    window.expData.preQuestions.push({
                      question: question.title,
                      answer: this.$content.find('.radioOther').val()
                    });
                  }
                  preQuestions(qNum + 1);
                  return true;
                }
              }
              $.alert({
                title: 'Error',
                boxWidth: '25%',
                useBootstrap: false,
                content: 'Please select an answer',
                type: 'red',
              });
              return false;
            } else {
              preQuestions(qNum + 1);
            }
          }
        }
      },
      onContentReady: function() {
        var jc = this;
        this.$content.find('form').on('submit', function(e) {
          e.preventDefault();
          jc.$$formSubmit.trigger('click');
        });
      },
      onOpenBefore: function() {
        if (question.type == 'specialKey') {
          this.buttons.formSubmit.hide();
        }
      }
    });
  }
}

//functions for the prequestions
function postQuestions(qNum) {
  if (qNum == window.expParam.postquestions.length) {
    console.log("Experiment Done");
    //saveData(new Date().getTime() + "" + Math.floor(Math.random() * 10) + ".csv", dataToCSV());
  } else {
    let question = window.expParam.postquestions[qNum],
      html = '';
    if (question.type == 'textbox') {
      html = '<form action="" class="formName">' +
        '<div class="form-group">' +
        '<label>' +
        question.question + '</label>' +
        '<input type="text" placeholder="' +
        question.placeholder +
        '" class="textAnswer" required />' +
        '</div>' +
        '</form>'
    } else if (question.type == 'choice') {
      html = question.question + '<br>';
      for (var i = 0; i < question.choices.length; i++) {
        if (question.choices[i].toLowerCase() != 'other') {
          html += '<label class="radioContainer">' +
            question.choices[i] +
            '<input type="radio" name="radio"> <span class="checkmark"></span> </label>'
        } else {
          html += '<label class="radioContainer" onclick="otherRadioClick()"><input type="radio" name="radio"><label>Other: <input type="text" class="radioOther"></label><span class="checkmark"></span> </label>'
        }
      }
    } else if (question.type == 'text') {
      html = question.question;
    } else if (question.type == "number") {
      html = question.question + '<br>' + "<input type=\"number\" id=\"ageInput\" min=\"" + question.min + "\" max=\"" + question.max + "\">";
    } else if (question.type == "ladder") {
      html = question.question + '<br><br>';
      for (var i = 1; i < 10; i++) {
        html += '<select id=\"ladderInput' + i + '\"><option value=\"-1\">Select a choice</option><option value=\"1\">' + (10 - i) + '0% Chance chance of $1.00</option><option value=\"0\">$0.50 for sure</option></select><br><br>';
      }
    }
    $.confirm({
      title: question.title,
      content: html,
      type: 'blue',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      buttons: {
        formSubmit: {
          text: 'Next',
          btnClass: 'btn-blue',
          keys: ['enter'],
          action: function() {
            if (question.type == 'textbox') {
              var textAns = this.$content.find('.textAnswer').val();
              if (!textAns) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please provide a valid answer',
                  type: 'red',
                });
                return false;
              } else {
                window.expData.postQuestions.push({
                  question: question.title,
                  answer: textAns
                });
                postQuestions(qNum + 1);
              }
            } else if (question.type == 'choice') {
              var radioList = this.$content.find($('.radioContainer'));
              for (var j = 0; j < radioList.length; j++) {
                if (radioList[j].getElementsByTagName('input')[0].checked) {

                  if (question.choices[j].toLowerCase() != 'other') {
                    window.expData.postQuestions.push({
                      question: question.title,
                      index: j,
                      answer: question.choices[j]
                    });
                  } else if (this.$content.find('.radioOther').val().length == 0) {
                    $.alert({
                      title: 'Error',
                      boxWidth: '25%',
                      useBootstrap: false,
                      content: 'If you select other, please do not leave it blank.',
                      type: 'red',
                    });
                    return false;
                  } else {
                    window.expData.postQuestions.push({
                      question: question.title,
                      answer: this.$content.find('.radioOther').val()
                    });
                  }
                  postQuestions(qNum + 1);
                  return true;
                }
              }
              $.alert({
                title: 'Error',
                boxWidth: '25%',
                useBootstrap: false,
                content: 'Please select an answer',
                type: 'red',
              });
              return false;
            } else if (question.type == 'number') {
              var textAns = this.$content.find('#ageInput').val();
              if (!textAns) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please provide a valid answer',
                  type: 'red',
                });
                return false;
              } else {
                window.expData.postQuestions.push({
                  question: question.title,
                  answer: textAns
                });
                postQuestions(qNum + 1);
              }
            } else if (question.type == 'ladder') {
              var ans = true;
              for (var i = 1; i < 10; i++) {
                ans = ans && document.getElementById('ladderInput' + i).value != "-1";
              }
              if (!ans) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please make sure you select answers for all choices.',
                  type: 'red',
                });
                return false;
              } else {
                let prob = []
                for (var i = 1; i < 10; i++) {
                  prob.push(parseInt(document.getElementById('ladderInput' + i).value));
                }
                window.expData.postQuestions.push({
                  question: question.title,
                  answer: prob
                });
                postQuestions(qNum + 1);
              }
            } else {
              postQuestions(qNum + 1);
            }
          }
        }
      },
      onContentReady: function() {
        var jc = this;
        this.$content.find('form').on('submit', function(e) {
          e.preventDefault();
          jc.$$formSubmit.trigger('click');
        });
      }
    });
  }
}

function dataToCSV() {
  var csv = "";
  csv += 'Bonus,' + window.bonusAmount + '\n'
  csv += '\nPrequestion,Answer\n'
  for (i = 0; i < window.expData.preQuestions.length; i++) {
    csv += "\"" + window.expData.preQuestions[i].question + '","' +
      window.expData.preQuestions[i].answer + '"\n';
  }
  csv += '\nPostquestion,Answer\n';
  if (window.expData.postQuestions.length == 0) {
    for (i = 0; i < window.expParam.postquestions.length; i++) {
      csv += '"' + window.expParam.postquestions[i].title + '",""\n';
    }
  } else {
    for (i = 0; i < window.expData.postQuestions.length; i++) {
      csv += '"' + window.expData.postQuestions[i].question + '","' +
        window.expData.postQuestions[i].answer + '"\n';
    }
  }

  //record trial data
  csv += 'ValidClickNumber,BlockNumber,MaxTimePerPatch,TotalTimeTask,PatchNumber,PatchSS,CurrentSS,PixelsPerSec,clickX,clickY,TimeInPatch,InterClickTime,PatchClick,Target?,';
  csv += 'sName,sNum,Points,TotalPoints,ElapsedTimeOnTask,TcurrentCt1,TcurrentCt2,TcurrentCt3,TcurrentCt4,Tname1,Tnumber1,Tpct1,TPoints1,TpointProb1,';
  csv += 'Tname2,Tnumber2,Tpct2,TPoints2,TpointProb2,Tname3,Tnumber3,Tpct3,TPoints3,TpointProb3,Tname4,Tnumber4,Tpct4,TPoints4,TpointProb4\n';
  for (var i = 0; i < window.trialData.length; i++) {
    csv += window.trialData[i].ValidClickNumber+ "," + window.trialData[i].BlockNumber+ "," + window.trialData[i].MaxTimePerPatch+ "," + window.trialData[i].TotalTimeTask+ "," + window.trialData[i].patchNum+ "," + window.trialData[i].patchSS+ "," + window.trialData[i].currentSS+ "," + window.trialData[i].pixelsPerSec+ "," + window.trialData[i].clickx+ "," + window.trialData[i].clicky+ "," + window.trialData[i].TimeInPatch+ "," + window.trialData[i].InterClickTime+ "," + window.trialData[i].PatchClick+ "," + window.trialData[i].Target+ "," + window.trialData[i].Clickname+ "," + window.trialData[i].Clicknum+ "," + window.trialData[i].Points+ "," + window.trialData[i].TotalPoints+ "," + window.trialData[i].ElapsedTimeOnTask+ "," + window.trialData[i].TcurrentCt1+ "," + window.trialData[i].TcurrentCt2+ "," + window.trialData[i].TcurrentCt3+ "," + window.trialData[i].TcurrentCt4+ "," + window.trialData[i].Tname1+ "," + window.trialData[i].Tnumber1+ "," + window.trialData[i].Tpct1+ "," + window.trialData[i].TPoints1+ "," + window.trialData[i].TpointProb1+ "," + window.trialData[i].Tname2+ "," + window.trialData[i].Tnumber2+ "," + window.trialData[i].Tpct2+ "," + window.trialData[i].TPoints2+ "," + window.trialData[i].TpointProb2+ "," + window.trialData[i].Tname3+ "," + window.trialData[i].Tnumber3+ "," + window.trialData[i].Tpct3+ "," + window.trialData[i].TPoints3+ "," + window.trialData[i].TpointProb3+ "," + window.trialData[i].Tname4+ "," + window.trialData[i].Tnumber4+ "," + window.trialData[i].Tpct4+ "," + window.trialData[i].TPoints4+ "," + window.trialData[i].TpointProb4+'\n';
  }
  return csv;
}

//function partial save
function saveData(filename, filedata) {
  $.ajax({
    type: 'post',
    cache: false,
    url: './save_data.php', // this is the path to the PHP script
    data: {
      filename: filename,
      filedata: filedata
    },
    success: function(msg) {
      $.confirm({
        title: window.expParam.confirm_popup.title,
        content: window.expParam.confirm_popup.content,
        type: 'blue',
        boxWidth: '55%',
        useBootstrap: false,
        typeAnimated: true,
        buttons: {
          close: {
            text: "Close",
            btnClass: 'btn-blue',
            action: function() {
              return false;
            }
          }
        },
        onOpenBefore: function() {
          // before the modal is displayed.
          this.buttons.close.hide();
        },
      });
      console.log('Data saved');
    },
    error: function(jqXhr, textStatus, errorThrown) {
      console.log(errorThrown);
    }
  });
}

function getNum(lower, upper) {
  return roundBetter(lower + (Math.random() * (upper - lower)), 2);
}

function feedback() {

}

function startTrial() {
  let html = '';
  let v;
  for (var i = 0; i < window.expParam.boxes.length; i++) {
    v = getNum(window.expParam.boxes[i].lower, window.expParam.boxes[i].upper);
    html += '<button class="stimuliButton" data-v="' + v + '"' + '> [' + window.expParam.boxes[i].lower + ", " + window.expParam.boxes[i].upper + "] </button>";
  }

  window.boxNum = 0;

  document.getElementById("searchCost").innerText = window.expParam.searchCost;
  document.getElementById("instr").style = "";

  let boxDiv = document.getElementById("BoxContainer");
  boxDiv.innerHTML = html;

  let boxList = boxDiv.getElementsByClassName('stimuliButton');
  for (var i = 0; i < boxList.length; i++) {
    boxList[i].onclick = function() {
      if (!this.classList.contains('muted')) {
        console.log(this.getAttribute("data-v"));
        this.innerText = this.getAttribute("data-v");
        this.classList.add("muted");
        window.boxNum += 1;
      } else {
        setTimeout(function() {
          postQuestions(0);
        }, window.expParam.endFeedbackDuration);
      }
      if (window.boxNum == window.expParam.boxes.length) {
        setTimeout(function() {
          postQuestions(0);
        }, window.expParam.endFeedbackDuration);
      }
    } //end for
  }
}

//function to start experiment
function startExp() {
  console.log("Experiment Started");
  startTrial();
}


//start script
$(document).ready(function() {

  //check device type
  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
    console.log('Mobile');
    $.confirm({
      title: "Error",
      content: "Please do not use a mobile device for this experiment.",
      type: 'red',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      buttons: {
        close: {
          text: "Close",
          btnClass: 'btn-blue',
          action: function() {
            return false;
          }
        }
      },
      onOpenBefore: function() {
        // before the modal is displayed.
        this.buttons.close.hide();
      },
    });
  } else { //not mobile

    //set up data collection object
    window.expData = {};
    window.expData.preQuestions = [];
    window.expData.postQuestions = [];

    preQuestions(0);
  }
});
