let cleaned_list;

function hasParameter(name) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.has(name);
}

function getParameterByName(name) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(name);
}

//Helper: shuffle an array
function shuffle(array) {
  for (var ii = array.length - 1; ii > 0; --ii) {
    var jj = Math.floor(Math.random() * (ii + 1));
    var temp = array[ii];
    array[ii] = array[jj];
    array[jj] = temp;
  }
}

//Helper: check if array has duplicates
function hasDuplicates(array) {
  return (new Set(array)).size !== array.length;
}

//Helper: check if 2 arrays are the same
function arraysEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length !== b.length) return false;

  for (var i = 0; i < a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}

//returns a random number generated by a truncated normal distribution
function normal(mean, std, left_trunc, right_trunc) {
  var u = 0,
    v = 0;
  while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)
  while (v === 0) v = Math.random();
  let result = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
  result *= std;
  result += mean;
  if (result < left_trunc) result = left_trunc;
  if (result > right_trunc) result = right_trunc;
  return result;
}

//Helper: Better rounding
function roundBetter(num, place) {
  let mod = Math.pow(10, place);
  return Math.round(num * mod + Math.sign(num) * 0.1 ** (17 - 2 - (Math.round(num * mod) / mod).toString().length)) / mod;
}

//Helper: Get Query
function getParameterByName(name, url) {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, '\\$&');
  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
    results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

//functions for the prequestions
function preQuestions(qNum) {
  
  if (qNum == window.expParam.prequestions.length) {
    setTimeout(function() {
      startExp();
    }, 500);
  } else {
    let question = window.expParam.prequestions[qNum],
      html = '',
      keys = ['enter'];
    if (question.type == 'textbox') {
      html = '<form action="" class="formName">' +
        '<div class="form-group">' +
        '<label>' +
        question.question + '</label>' +
        '<textarea type="text" placeholder="' +
        question.placeholder +
        '" class="textAnswer" style="height: 70px;" required /></textarea>' +
        '</div>' +
        '</form>'
    } else if (question.type == 'choice' || question.type == 'exclusion') {
      html = question.question + '<br>';
      for (var i = 0; i < question.choices.length; i++) {
        if (question.choices[i].toLowerCase() != 'other') {
          html += '<label class="radioContainer">' +
            question.choices[i] +
            '<input type="radio" name="radio"> <span class="checkmark"></span> </label>'
        } else {
          html += '<label class="radioContainer" onclick="otherRadioClick()"><input type="radio" name="radio"><label>Other: <input type="text" class="radioOther"></label><span class="checkmark"></span> </label>'
        }
      }
    } else if (question.type == 'text') {
      html = question.question;
      if (!(question.pFirstImg === undefined)) {
        let cond_img = window.expData.pqOrder === "pFirst" ? question.pFirstImg : question.qFirstImg;
        html = html.replace("%%img%%", cond_img);
      }
    } else if (question.type == "extext") {
      window.expData.exclusionCount++;
      html = question.question + '<br>';
      if (!(question.pFirstImg === undefined)) {
        let cond_img = window.expData.pqOrder === "pFirst" ? question.pFirstImg : question.qFirstImg;
        html = html.replace("%%img%%", cond_img);
      }
      window.tries = 0;
      
      let exclusion_arr;
      if (window.expData.exclusionCount === 1) {
        exclusion_arr = window.expParam.exclusion;
      } else {
        exclusion_arr = window.expParam.exclusion2;
      }
      shuffle(exclusion_arr);
      let qI;
      for (var i = 0; i < exclusion_arr.length; i++) {
        qI = exclusion_arr[i],
          html += '<br><br><strong>Question ' + (i + 1) + '</strong><br>' + qI.question + '<br><div class="choiceContainer">';
        for (var j = 0; j < qI.choices.length; j++) {
          html += '<label class="radioContainer">' + qI.choices[j] + '<input type="radio" name="radio' + i + '"><span class="checkmark"></span> </label>'
        }
        html += '</div>';
      }
    } else if (question.type == 'specialKey') {
      keys = ['p', 'q'];
      html = question.question;
    }
    window.preModal = $.confirm({
      title: question.title,
      content: html,
      type: 'blue',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      animateFromElement: false,
      animation: 'opacity',
      buttons: {
        formSubmit: {
          text: 'Next',
          btnClass: 'btn-blue',
          keys: keys,
          isDisabled: (question.scroll !== null && question.scroll == true),
          action: function() {
            if (question.type == 'textbox') {
              var textAns = this.$content.find('.textAnswer').val();
              if (!textAns) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please provide a valid answer',
                  type: 'red',
                });
                return false;
              } else {
                window.expData.preQuestions.push({
                  question: question.title,
                  answer: textAns
                });
                preQuestions(qNum + 1);
              }
            } else if (question.type == 'extext') {

              var choiceList = this.$content.find($('.choiceContainer'));
              var radioList, exCheck = [];
              window.tries += 1;

              for (var i = 0; i < choiceList.length; i++) {
                exCheck.push(i + 1);
                radioList = choiceList[i].getElementsByClassName('radioContainer');
                for (var j = 0; j < radioList.length; j++) {
                  if (radioList[j].getElementsByTagName('input')[0].checked) {
                    if (window.expData.exclusionCount === 1) {
                      if (window.expParam.exclusion[i].correct == j) {
                        exCheck.pop(); //add to incorrect list
                      }
                    } else {
                      if (window.expParam.exclusion2[i].correct == j) {
                        exCheck.pop(); //add to incorrect list
                      }
                    }
                  }
                } //for j
              } //for i

              if (exCheck.length == 0 || true) {
                window.expData.preQuestions.push({
                  question: 'Comprehension Questions',
                  answer: window.tries + ' tries'
                });
                preQuestions(qNum + 1);
                return true;
              } else {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'The following questions were incorrect: <br><strong>' + exCheck.toString() + '</strong><br>Please make sure to read carefully and answer them correctly.<br>',
                  type: 'red',
                });
                return false;
              }
            } else if (question.type == 'choice') {
              var radioList = this.$content.find($('.radioContainer'));
              for (var j = 0; j < radioList.length; j++) {
                if (radioList[j].getElementsByTagName('input')[0].checked) {

                  if (question.choices[j].toLowerCase() != 'other') {
                    window.expData.preQuestions.push({
                      question: question.title,
                      answer: question.choices[j]
                    });
                  } else if (this.$content.find('.radioOther').val().length == 0) {
                    $.alert({
                      title: 'Error',
                      boxWidth: '25%',
                      useBootstrap: false,
                      content: 'If you select other, please do not leave it blank.',
                      type: 'red',
                    });
                    return false;
                  } else {
                    window.expData.preQuestions.push({
                      question: question.title,
                      answer: this.$content.find('.radioOther').val()
                    });
                  }
                  preQuestions(qNum + 1);
                  return true;
                }
              }
              $.alert({
                title: 'Error',
                boxWidth: '25%',
                useBootstrap: false,
                content: 'Please select an answer',
                type: 'red',
              });
              return false;
            } else if (question.type == 'exclusion') {
              var radioList = this.$content.find($('.radioContainer'));
              for (var j = 0; j < radioList.length; j++) {
                if (radioList[j].getElementsByTagName('input')[0].checked) {

                  //push answer
                  window.expData.preQuestions.push({
                    question: question.title,
                    answer: question.choices[j]
                  });
                  if (question.choices[j] == question.choices[question.correct]) { //correcly answered
                    preQuestions(qNum + 1);
                    console.log('Exclusion passed');
                    return true;
                  } else { //incorrect answer
                    $.confirm({
                      title: "Error",
                      content: "You did not answer the comprehension question correctly. Please return your submission on Prolific by selecting the 'Stop without completing' button.",
                      type: 'red',
                      boxWidth: '55%',
                      useBootstrap: false,
                      typeAnimated: true,
                      buttons: {
                        close: {
                          text: "Close",
                          btnClass: 'btn-blue',
                          action: function() {
                            return false;
                          }
                        }
                      },
                      onOpenBefore: function() {
                        // before the modal is displayed.
                        this.buttons.close.hide();
                      },
                    });
                    return true;
                  }
                }
              }
              $.alert({
                title: 'Error',
                boxWidth: '25%',
                useBootstrap: false,
                content: 'Please select an answer',
                type: 'red',
              });
              return false;
            } else {
              preQuestions(qNum + 1);
            }
          }
        }
      },
      onContentReady: function() {
        var jc = this;
        this.$content.find('form').on('submit', function(e) {
          e.preventDefault();
          jc.$$formSubmit.trigger('click');
        });
        if (question.scroll !== null && question.scroll == true) {
          console.log(this.buttons.formSubmit.show);
          if ($('.jconfirm-content-pane').scrollTop() + $('.jconfirm-content-pane').height() >= ($('.jconfirm-content').height() * 0.95)) {
            window.preModal.buttons.formSubmit.enable();
          }
          $('.jconfirm-content-pane').scroll(function() {
            if ($('.jconfirm-content-pane').scrollTop() + $('.jconfirm-content-pane').height() >= ($('.jconfirm-content').height() * 0.95)) {
              window.preModal.buttons.formSubmit.enable();
            }
          });
        }
      },
      onOpenBefore: function() {
        if (question.type == 'specialKey') {
          this.buttons.formSubmit.hide();
        }
      }
    });
  }
}

//functions for the prequestions
function postQuestions(qNum) {
  if (qNum == window.expParam.postquestions.length) {
    console.log("Experiment Done");
    saveData(new Date().getTime() + "" + Math.floor(Math.random() * 10) + ".csv", dataToCSV());

  } else {
    let question = window.expParam.postquestions[qNum],
      html = '';
    if (question.type == 'textbox') {
      html = '<form action="" class="formName">' +
        '<div class="form-group">' +
        '<label>' +
        question.question + '</label>' +
        '<textarea type="text" placeholder="' +
        question.placeholder +
        '" class="textAnswer" style="height: 70px;" required /></textarea>' +
        '</div>' +
        '</form>'
    } else if (question.type == 'box') {
      html = question.question + '<br><table><tbody>';
      for (var i = 0; i < question.boxes.length; i++) {
        html += "<tr><td style=\"border: 1px solid #000; padding: 10 50; text-align: center;\">[" + question.boxes[i] + "]</td>";
        html += "<td style=\"padding-left: 50px;\"><input style=\"font-size: 17px; width: 200px;\" type=\"number\" placeholder=\"Textbox\" id=\"boxnum" + i + "\" min=\"1\" max=\"" + question.boxes.length + "\"></td></tr>";
      }
      html += "</tbody></table>"
    } else if (question.type == 'choice') {
      html = question.question + '<br>';
      for (var i = 0; i < question.choices.length; i++) {
        if (question.choices[i].toLowerCase() != 'other') {
          html += '<label class="radioContainer">' +
            question.choices[i] +
            '<input type="radio" name="radio"> <span class="checkmark"></span> </label>'
        } else {
          html += '<label class="radioContainer" onclick="otherRadioClick()"><input type="radio" name="radio"><label>Other: <input type="text" class="radioOther"></label><span class="checkmark"></span> </label>'
        }
      }
    } else if (question.type == 'text') {
      html = question.question;
    } else if (question.type == "number") {
      html = question.question + '<br>' + "<input type=\"number\" id=\"ageInput\" min=\"" + question.min + "\" max=\"" + question.max + "\">";
    } else if (question.type == "ladder") {
      html = question.question + '<br><br>';
      for (var i = 1; i < 10; i++) {
        html += '<select id=\"ladderInput' + i + '\"><option value=\"-1\">Select a choice</option><option value=\"1\">' + (10 - i) + '0% Chance chance of $1.00</option><option value=\"0\">$0.50 for sure</option></select><br><br>';
      }
    }
    $.confirm({
      title: question.title,
      content: html,
      type: 'blue',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      animation: 'opacity',
      buttons: {
        formSubmit: {
          text: 'Next',
          btnClass: 'btn-blue',
          keys: ['enter'],
          action: function() {
            if (question.type == 'textbox') {
              var textAns = this.$content.find('.textAnswer').val();
              if (!textAns) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please provide a valid answer',
                  type: 'red',
                });
                return false;
              } else {
                window.expData.postQuestions.push({
                  question: question.title,
                  answer: textAns
                });
                postQuestions(qNum + 1);
              }
            } else if (question.type == 'box') {
              let error = false;
              let boxVals = [];
              for (var i = 0; i < question.boxes.length; i++) {
                let boxval = this.$content.find('#boxnum' + i).val();
                if (!boxval) {
                  error = true;
                } else {
                  if (parseInt(boxval, 10) < 1 || parseInt(boxval, 10) > question.boxes.length) {
                    error = true;
                  }
                  boxVals.push(boxval);
                }
              }
              error = error || hasDuplicates(boxVals);
              if (!error) {
                window.expData.postQuestions.push({
                  question: question.title,
                  answer: '[' + boxVals.toString() + ']'
                });
                postQuestions(qNum + 1);
              } else {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please enter the numbers 1 through 5 in the boxes. You may only enter each number once.',
                  type: 'red',
                });
                return false;
              }
            } else if (question.type == 'choice') {
              var radioList = this.$content.find($('.radioContainer'));
              for (var j = 0; j < radioList.length; j++) {
                if (radioList[j].getElementsByTagName('input')[0].checked) {

                  if (question.choices[j].toLowerCase() != 'other') {
                    window.expData.postQuestions.push({
                      question: question.title,
                      index: j,
                      answer: question.choices[j]
                    });
                  } else if (this.$content.find('.radioOther').val().length == 0) {
                    $.alert({
                      title: 'Error',
                      boxWidth: '25%',
                      useBootstrap: false,
                      content: 'If you select other, please do not leave it blank.',
                      type: 'red',
                    });
                    return false;
                  } else {
                    window.expData.postQuestions.push({
                      question: question.title,
                      answer: this.$content.find('.radioOther').val()
                    });
                  }
                  postQuestions(qNum + 1);
                  return true;
                }
              }
              $.alert({
                title: 'Error',
                boxWidth: '25%',
                useBootstrap: false,
                content: 'Please select an answer',
                type: 'red',
              });
              return false;
            } else if (question.type == 'number') {
              var textAns = this.$content.find('#ageInput').val();
              if (!textAns) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please provide a valid answer',
                  type: 'red',
                });
                return false;
              } else {
                window.expData.postQuestions.push({
                  question: question.title,
                  answer: textAns
                });
                postQuestions(qNum + 1);
              }
            } else if (question.type == 'ladder') {
              var ans = true;
              for (var i = 1; i < 10; i++) {
                ans = ans && document.getElementById('ladderInput' + i).value != "-1";
              }
              if (!ans) {
                $.alert({
                  title: 'Error',
                  boxWidth: '25%',
                  useBootstrap: false,
                  content: 'Please make sure you select answers for all choices.',
                  type: 'red',
                });
                return false;
              } else {
                let prob = []
                for (var i = 1; i < 10; i++) {
                  prob.push(parseInt(document.getElementById('ladderInput' + i).value));
                }
                window.expData.postQuestions.push({
                  question: question.title,
                  answer: prob
                });
                postQuestions(qNum + 1);
              }
            } else {
              postQuestions(qNum + 1);
            }
          }
        }
      },
      onContentReady: function() {
        var jc = this;
        this.$content.find('form').on('submit', function(e) {
          e.preventDefault();
          jc.$$formSubmit.trigger('click');
        });
      }
    });
  }
}

function arrNumsToLetters(arr) {
  let tmp = [];
  let letter_array = ['A','B','C','D','E'];
  for (let j=0;j<arr.length;j++) {
    tmp.push(letter_array[arr[j]]);
  }
  return tmp;
}

function dataToCSV() {
  var csv = "";
  csv += "Prolific ID," + window.expData.proID + '\n';
  csv += '\nPrequestion,Answer\n'
  for (i = 0; i < window.expData.preQuestions.length; i++) {
    csv += "\"" + window.expData.preQuestions[i].question + '","' +
      window.expData.preQuestions[i].answer + '"\n';
  }
  csv += '\nPostquestion,Answer\n';
  if (window.expData.postQuestions.length == 0) {
    for (i = 0; i < window.expParam.postquestions.length; i++) {
      csv += '"' + window.expParam.postquestions[i].title + '",""\n';
    }
  } else {
    for (i = 0; i < window.expData.postQuestions.length; i++) {
      csv += '"' + window.expData.postQuestions[i].question + '","' +
        window.expData.postQuestions[i].answer + '"\n';
    }
  }
  csv += "PQ Order," + window.expData.pqOrder + '\n';
  csv += '\nBlock,Boxes Opened,Set,isPractice,Max Value,Box Order,Box Values, Box Prices, Box Quals,Box Order (Randomization)\n';
  for (i = 0; i < window.expData.trialData.length; i++) {
    let isPractice = i < window.expParam.practice_boxes.length ? "yes" : "no";
    csv += '"' + (i + 1) + '","' + window.expData.trialData[i].boxes + '","' + window.expData.trialData[i].set + '","' + isPractice + '","' +
      window.expData.trialData[i].max + '","[' + window.expData.trialData[i].order + 
      ']","[' + window.expData.trialData[i].vals + 
      ']","[' + window.expData.trialData[i].prices + 
      ']","[' + window.expData.trialData[i].quals + 
      ']","[' + arrNumsToLetters(window.expData.randomOrder[i].boxes) + ']"\n';
  }

  return csv;
}

//function partial save
function saveData(filename, filedata) {
  
  $.ajax({
    type: 'post',
    cache: false,
    url: './save_data.php', // this is the path to the PHP script
    data: {
      filename: filename,
      filedata: filedata
    },
    success: function(msg) {
      $.confirm({
        title: window.expParam.confirm_popup.title,
        content: window.expParam.confirm_popup.content,
        type: 'blue',
        boxWidth: '55%',
        useBootstrap: false,
        typeAnimated: true,
        buttons: {
          close: {
            text: "Next",
            btnClass: 'btn-blue',
            action: function() {
              window.location.replace(window.expParam.redirect);
            }
          }
        },
      });

      console.log('Data saved');
    },
    error: function(jqXhr, textStatus, errorThrown) {
      console.log(errorThrown);
    }
  });
  
}

function getNum(lower, upper) {
  return roundBetter(lower + (Math.random() * (upper - lower)), 0);
}

function setupBoxPlotCanvas(canvas, ctx, box, labels, index,  wRatio, hRatio) {
  let botNum = labels[0];
  let topNum = labels[labels.length-1];
  let ticks = labels.slice(1,-1);
  let vList = [];

  let nIndex = index === "price" ? 1 : 2;

  for (var i = 0; i < box.bp_amount; i++) {
    vList.push(box.box_values[i][nIndex]);
  }

  let pixPerUnit = 200 / (topNum - botNum);

  //draw bottom line
  ctx.strokeStyle = "#000";
  ctx.lineWidth = 1;
  ctx.beginPath();
  ctx.moveTo(0*wRatio, 60*hRatio);
  ctx.lineTo(215*wRatio, 60*hRatio);
  ctx.stroke();

  function drawTick(x, y, len, val) {
    ctx.strokeStyle = "#000";
    ctx.lineWidth = 1.0*wRatio;
    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x, y + len);
    ctx.stroke();
  }

  ctx.textAlign = 'center';
  ctx.font = (12.0*wRatio)+'px arial';

  drawTick(5*wRatio, 60*hRatio, 5*hRatio, botNum);
  drawTick(205*wRatio, 60*hRatio, 5*hRatio, topNum);
  ctx.fillText(botNum, 10*wRatio, 77*hRatio);
  ctx.fillText(topNum, 205*wRatio, 77*hRatio);
  for (var i = 0; i < ticks.length; i++) {
    drawTick((5 + pixPerUnit * (ticks[i]-botNum))*wRatio, 60*hRatio, 5*hRatio, ticks[i]);
    ctx.fillText(ticks[i], (5 + pixPerUnit * (ticks[i]-botNum))*wRatio, 77*hRatio);
  }

  //draw top line
  ctx.strokeStyle = "#000";
  ctx.lineWidth = 1;
  ctx.beginPath();
  ctx.moveTo(5*wRatio, 30*hRatio);
  ctx.lineTo(205*wRatio, 30*hRatio);
  ctx.stroke();

  for (var i = 0; i < vList.length; i++) {
    drawTick((5 + pixPerUnit * (vList[i]-botNum))*wRatio, 22*hRatio, 16*hRatio, vList[i]);
  }
}

//canvas width, edge width, and num ticks are all passed in
function setupCanvas(canvas, ctx, box, cwidth, cheight, w_edge, h_edge, nTicks_x, nTicks_y, wRatio, hRatio) {
  let ticks = box.ticks;
  let vList = [];
  
  // let w_edge = cwidth / 16.0;
  let w_main = cwidth - (2*w_edge);
  let h_main = cheight - (2*h_edge);

  function drawTick(x, y, len, val) {
    ctx.strokeStyle = "#000";
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x, y + len);
    ctx.stroke();
  }
  
  //submitted x,y values should already be normalized to 0,0 to 100,100 cartesian plot
  function drawDot(x, y, radius) {
    ctx.strokeStyle = "black";
    ctx.beginPath();
    //example, if plot is 215 wide by 215 wide, then...
    //plot is 185 x 185, and it starts at 15,15 on the canvas and stretches to 200,200
    x = x * (w_main/100) + w_edge;
    y = 100 - y;
    y = y * (h_main/100) + h_edge;
    ctx.arc(x, y, radius, 0, 2 * Math.PI);
    ctx.stroke();
  }
  
  //make edges of box
  function drawLine(color,x1,y1,x2,y2) {
    ctx.strokeStyle = color;
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
  }
    
  //fill background
  ctx.fillStyle = "#ebebeb";
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  
  //draw plot borders
  drawLine("black",w_edge,h_edge,cwidth-w_edge,h_edge);
  drawLine("black",cwidth-w_edge,h_edge,cwidth-w_edge,cheight-h_edge);
  drawLine("black",cwidth-w_edge,cheight-h_edge,w_edge,cheight-h_edge);
  drawLine("black",w_edge,cheight-h_edge,w_edge,h_edge);
  
  //draw grid lines
  for (let i=h_edge; i<cheight-h_edge; i+= (h_main/10)) {
    if (i != h_edge) {
      drawLine("white",w_edge,i,cwidth-w_edge,i); //horizontal
    }
  }
  
  for (let i=w_edge; i<cwidth-w_edge; i+= (w_main/10)) {
    if (i != w_edge) {
      drawLine("white",i,h_edge,i,cheight-h_edge); //vertical
    }
  }
  
  //draw axes
  ctx.textAlign = 'center';
  ctx.font = (15*wRatio)+'px arial';
  ctx.fillStyle = "black";
  ctx.fillText("<-- price -->", (cwidth/2), cheight/10);
  
  ctx.save();
  ctx.translate(cwidth - (cwidth/7.5),cheight/2);
  ctx.rotate(Math.PI/2);
  ctx.font = (15*wRatio)+'px arial';
  ctx.fillText("<-- quality -->", 0, 0);
  ctx.restore();
  
  //draw grid labels
  let label_value = 3.00;
  for (let i=w_edge; i<=cwidth-w_edge; i+= (w_main/nTicks_x)) {
    //i increases horizontally
    ctx.textAlign = 'center';
    ctx.font = (.075*cheight)+'px arial';
    ctx.fillStyle = "black";
    ctx.fillText(""+label_value, i, cheight-(cheight/40));
          
    label_value += 5.00/nTicks_x;

  }
  
  label_value = 0;
  for (let i=h_edge; i<=cheight-h_edge; i+= (h_main/nTicks_y)) {
      ctx.font = (.10*cheight)+'px arial';
      ctx.fillText(""+label_value, cwidth/8, cheight-i+(.025*cheight));
      
      //i increases vertically
      // ctx.save();
      // ctx.translate(cwidth/10,cheight-i);
      // ctx.rotate(-Math.PI/2);
      // ctx.font = (.10*cheight)+'px arial';
      // ctx.fillText(""+label_value, 0, 0);
      // ctx.restore();
      
      label_value += 10/nTicks_y;

  }
    
  //draw dots 
  for (let i=0; i<box.scatter_amount; i++) {
    // let x = Math.floor(Math.random()*70)+5;
    // let y = x + Math.floor(Math.random()*20);
    //x and y values should be normalized to 0,0 to 100,100 cartesian plot
    let x = (box.box_values[i][1] - 3.00) * 20;
    let y = box.box_values[i][2] * 10;
    drawDot(x,y,1.0*wRatio);
  }
  
}

function startTrial() {
  let html = '';
  let rd, v, p, q, my_set, box, nButton, nCanvas, nText;
  let boxDiv = document.getElementById("BoxContainer");
  boxDiv.innerHTML = '';
  window.boxVals = [];
  window.boxPrices = [];
  window.boxQuals = [];
  nTable = document.createElement('table');
  
  //top row
  oTD1 = document.createElement('td');
  oTD2 = document.createElement('td');
  oTD3 = document.createElement('td');
  oTD4 = document.createElement('td');
  if (window.expData.pqOrder === "pFirst") {
    oText1 = document.createTextNode('PRICE');
    oText2 = document.createTextNode('QUALITY');
  } else if (window.expData.pqOrder === "qFirst") {
    oText1 = document.createTextNode('QUALITY');
    oText2 = document.createTextNode('PRICE');
  }
  oTD2.appendChild(oText1);
  oTD2.classList.add('brandLabel');
  oTD3.appendChild(oText2);
  oTD3.classList.add('brandLabel');
  oRow = document.createElement('tr');
  
  oRow.appendChild(oTD1);
  oRow.appendChild(oTD2);
  oRow.appendChild(oTD3);
  oRow.appendChild(oTD4);
  nTable.appendChild(oRow);
  
  console.log(window.expParam.boxes[window.expData.randomOrder[window.blk].set]);
  console.log(window.blk);
  
  for (var i = 0; i < window.expParam.boxes[window.expData.randomOrder[window.blk].set].length; i++) {
    box = window.expParam.boxes[window.expData.randomOrder[window.blk].set][window.expData.randomOrder[window.blk].boxes[i]];
    // v = getNum(box.lower, box.upper);
    rd = box.box_values[Math.floor(Math.random()*box.box_values.length)]; //random datapoint
    v = (Math.round(rd[0] * 10) / 10).toFixed(1);
    p = (Math.round(rd[1] * 10) / 10).toFixed(1);
    q = (Math.round(rd[2] * 10) / 10).toFixed(1);
    my_set = box.set;
    window.thisSet = box.set;
    // v = rd[0];
    // p = rd[1];
    // q = rd[2];
    
    nRow = document.createElement('tr');     
    nTD1 = document.createElement('td');
    nText = document.createTextNode('Brand ' + (i + 1));
    nTD1.classList.add('brandLabel');
    nTD1.appendChild(nText);
    nRow.appendChild(nTD1);
    
    for (var j = 0; j < 3; j++) {
      nButton = document.createElement('button');
      nButton.classList.add('stimuliButton');
      nButton.setAttribute('data-index', i + 1);
      nButton.setAttribute('data-v', v);
      nButton.setAttribute('data-p', p);
      nButton.setAttribute('data-q', q);
      nButton.setAttribute('data-set', my_set);
      nCanvas = document.createElement('canvas');
      nButton.setAttribute('row-pos', j);
      
      
      //************************************************************CANVAS HEIGHT AND WIDTH************************************************************//
      
      let window_width = jQuery(window).width();
      window.wRatio = window_width / 1920;
      let window_height = jQuery(window).height(); 
      window.hRatio = window_height / 866;
      
      //my_ratio
      let wRatio = window.wRatio;
      let hRatio = window.hRatio;
      
      let CANVAS_WIDTH = 200*wRatio;
      let CANVAS_HEIGHT = 120*hRatio;
      let CANVAS_W_EDGE = 50*wRatio;
      let CANVAS_H_EDGE = 20*hRatio;
      let num_ticks_x = 5;
      let num_ticks_y = 5;
      
      
      //************************************************************CANVAS HEIGHT AND WIDTH************************************************************//
      
      if (j < 2) {
        CANVAS_WIDTH = 215*wRatio;
        CANVAS_HEIGHT = 80*hRatio;
        nCanvas.setAttribute('width', CANVAS_WIDTH);
        nCanvas.setAttribute('height', CANVAS_HEIGHT);
        nButton.appendChild(nCanvas);
        if (j === 0) {
          if (window.expData.pqOrder === "pFirst") { setupBoxPlotCanvas(nCanvas,nCanvas.getContext('2d'),box,[3.00,4.25,5.50,6.75,8.00],"price", wRatio, hRatio); }
          else { setupBoxPlotCanvas(nCanvas,nCanvas.getContext('2d'),box,[0,2.5,5,7.5,10],"quality",  wRatio, hRatio); }
          
        } else {
          if (window.expData.pqOrder === "qFirst") { setupBoxPlotCanvas(nCanvas,nCanvas.getContext('2d'),box,[3.00,4.25,5.50,6.75,8.00],"price",  wRatio, hRatio); }
          else { setupBoxPlotCanvas(nCanvas,nCanvas.getContext('2d'),box,[0,2.5,5,7.5,10],"quality",  wRatio, hRatio); }
        }
        //html += '<button class="stimuliButton" data-index="' + (i + 1) + '" data-v="' + v + '" data-low' + +'> Brand ' + (i + 1) + '<canvas width="215" height="80"></canvas> </button>';
        // nTable = document.createElement('table');
      } else {
        nCanvas.setAttribute('width', CANVAS_WIDTH);
        nCanvas.setAttribute('height', CANVAS_HEIGHT);
        nButton.appendChild(nCanvas);
        setupCanvas(nCanvas,nCanvas.getContext('2d'), box, CANVAS_WIDTH, CANVAS_HEIGHT, CANVAS_W_EDGE, CANVAS_H_EDGE, num_ticks_x, num_ticks_y,wRatio,hRatio);
      }
      
      nTD2 = document.createElement('td');
      nTD2.appendChild(nButton);
      nRow.appendChild(nTD2);
    }
    
    nTable.appendChild(nRow);
    boxDiv.appendChild(nTable);
    // boxDiv.appendChild(nButton);
    window.boxVals.push(v);
    window.boxPrices.push(p);
    window.boxQuals.push(q);
  }
  window.boxNum = 0;
  window.maxPoint = 0;
  window.maxPointPrice = 0;
  window.maxPointQuality = 0;
  window.boxOrd = [];

  document.getElementById("searchCost").innerText = window.expParam.searchCost;
  document.getElementById("instr").style = "";
    
  //start timer
  window.timer = window.expParam.timeDuration;
  
  if (hasParameter('t')) {
    const tValue = getParameterByName('t');
    const tInt = parseInt(tValue, 10);
    if (!isNaN(tInt) && tInt > -1) {
      window.timer = tInt;
    }
  }

  
  document.getElementById("countDown").innerText = window.timer + " seconds";

  function cDown() {
    window.timer--;
    document.getElementById("countDown").innerText = window.timer + " seconds";
    if (window.timer == 0) {
      stopSearch();
    } else {
      setTimeout(function() {
        cDown();
      }, 1000);
    }
  }
  setTimeout(function() {
    cDown();
  }, 1000);

  //html += '<div id="CostCount">Cost for this round: <span id="PointCost">0</span> points</div>';
  let nDiv = document.createElement('div');
  nDiv.id = "CostCount";
  nText = document.createTextNode('Cost for this round: ');
  nDiv.appendChild(nText);
  let nSpan = document.createElement('span');
  nText = document.createTextNode('0');
  nSpan.appendChild(nText);
  nSpan.id = "PointCost";
  nDiv.appendChild(nSpan);
  nText = document.createTextNode(' points');
  nDiv.appendChild(nText);
  boxDiv.appendChild(nDiv);

  //boxDiv.innerHTML = html;

  let boxList = boxDiv.getElementsByClassName('stimuliButton');
  for (var i = 0; i < boxList.length; i++) {

    boxList[i].onclick = function() {
      if (!this.classList.contains('muted') && !this.classList.contains('mutednew')) {
        console.log(this.getAttribute("data-v"));
        if (this.getAttribute("row-pos") != "2") {
          this.innerText = this.getAttribute("row-pos") === "0" ? this.getAttribute("data-p") : this.getAttribute("data-q");
        }

        if (window.maxPoint < parseFloat(this.getAttribute("data-v"))) {
          window.maxPoint = parseFloat(this.getAttribute("data-v"));
          window.maxPointPrice = parseFloat(this.getAttribute("data-p"));
          window.maxPointQuality = parseFloat(this.getAttribute("data-q"));
        }

        for (let j = 0; j < boxList.length; j++) {
          if (boxList[j].classList.contains('mutednew')) {
            boxList[j].classList.add('muted');
            boxList[j].classList.remove('mutednew');
          }
        }
        
        this.classList.add("mutednew");
        
        for (let i=0;i<boxList.length;i++) {
          if (boxList[i].getAttribute("data-index") === this.getAttribute("data-index")) {
            if (true) {
              boxList[i].classList.add("mutednew");
              if (boxList[i].getAttribute("row-pos") != 2) {
                boxList[i].innerText = boxList[i].getAttribute("row-pos") === "0" ? boxList[i].getAttribute("data-p") : boxList[i].getAttribute("data-q");
              }
            }
          }
        }
        
        
        window.boxNum += 1;
        window.boxOrd.push(this.getAttribute("data-index"));        
        document.getElementById("PointCost").innerText = (window.boxNum * window.expParam.searchCost);
      }
      // if (window.boxNum == window.expParam.boxes.length) {
      //   setTimeout(function() {
      //     postQuestions(0);
      //   }, window.expParam.endFeedbackDuration);
      // }
    } //end for
    
    boxList[i].addEventListener("mouseover",function() {
      if (!this.classList.contains('muted') && !this.classList.contains('mutednew')) {
        this.classList.add("hoverbutton");
        
        for (let i=0;i<boxList.length;i++) {
          if (boxList[i].getAttribute("data-index") === this.getAttribute("data-index")) {
            if (true) {
              boxList[i].classList.add("hoverbutton");
            }
          }
        }
      }
      
    });
    
    boxList[i].addEventListener("mouseout",function() {
      this.classList.remove("hoverbutton");
      
      for (let i=0;i<boxList.length;i++) {
        if (boxList[i].getAttribute("data-index") === this.getAttribute("data-index")) {
          if (true) {
            boxList[i].classList.remove("hoverbutton");
          }
        }
      }
      
    });
    
  }
}

//function that stops the search
function stopSearch() {

  window.blk++;

  //save data
  window.expData.trialData.push({
    boxes: window.boxNum,
    max: window.maxPoint,
    order: window.boxOrd,
    vals: window.boxVals,
    prices: window.boxPrices,
    quals: window.boxQuals,
    set: window.thisSet
  });


  if (window.blk < window.expParam.boxes.length) {

    //show details
    $.confirm({
      title: "Details from the last round:",
      content: '<strong>Amount Paid to Open Boxes: </strong>' + (window.boxNum * window.expParam.searchCost) + '<br><strong>Value: </strong>' + window.maxPoint.toFixed(1) + '<br><strong>Price: </strong>' + (window.maxPointPrice.toFixed(1)) + '<br><strong>Quality: </strong>' + (window.maxPointQuality.toFixed(1)) + '<br><br> Click "NEXT" to continue to the next trial.',
      type: 'blue',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      buttons: {
        close: {
          text: "Next",
          btnClass: 'btn-blue',
          action: function() {
            startTrial();
          }
        }
      }
    });
  } else { //last block
    $.confirm({
      title: "Details from the last round:",
      content: '<strong>Amount Paid to Open Boxes: </strong>' + (window.boxNum * window.expParam.searchCost) + '<br><strong>Value: </strong>' + window.maxPoint.toFixed(1) + '<br><strong>Price: </strong>' + (window.maxPointPrice.toFixed(1)) + '<br><strong>Quality: </strong>' + (window.maxPointQuality.toFixed(1)),
      type: 'blue',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      buttons: {
        close: {
          text: "Next",
          btnClass: 'btn-blue',
          action: function() {
            setTimeout(function() {
              document.getElementById("StimArea").style = "display:none;";
              postQuestions(0);
            }, window.expParam.endFeedbackDuration);
          }
        }
      }
    });
  }
}


//function to start experiment
function startExp() {
  console.log("Experiment Started");
  startTrial();
}

function assembleCleanedList() {  
  //TODO introduce randomization here
  let obj = {};
  for (let i=0;i<window.cleanedList.values.length;i++) {
    let list = window.cleanedList.values;
    if (!obj[list[i][1]]) {
      obj[list[i][1]] = [];
    }
    if (!obj[list[i][1]][list[i][2]]) {
      obj[list[i][1]][list[i][2]] = [];
    }
    obj[list[i][1]][list[i][2]].push(list[i]);
  }
  
  let set_counter = -1;
  let letter_arr = ['A','B','C','D','E'];
  let curr_boxes = [window.expParam.practice_boxes,window.expParam.boxes];
  
  for (let h=0;h<curr_boxes.length;h++) {
    for (let i=0;i<curr_boxes[h].length;i++) {
      set_counter++;
      for (let j=0;j<curr_boxes[h][i].length;j++) {
        curr_boxes[h][i][j].box_name = letter_arr[j];
        curr_boxes[h][i][j].bp_amount = window.expParam.bp_amount;
        curr_boxes[h][i][j].scatter_amount = window.expParam.scatter_amount;
        curr_boxes[h][i][j].set = obj[Object.keys(obj)[set_counter]]['A'][0][1];
        let box_values = [];
        for (let k=0;k<30;k++) {
          shuffle(obj[Object.keys(obj)[set_counter]][letter_arr[j]]);
          box_values.push((obj[Object.keys(obj)[set_counter]][letter_arr[j]][k]).slice(3,6));
        }
        curr_boxes[h][i][j].box_values = box_values;
        
      }
    }
  }
  
  shuffle(window.expParam.boxes);
    
  return obj;
}

//start script
$(document).ready(function() {

  //check device type
  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && false) {
    console.log('Mobile');
    $.confirm({
      title: "Error",
      content: "Please do not use a mobile device for this experiment.",
      type: 'red',
      boxWidth: '55%',
      useBootstrap: false,
      typeAnimated: true,
      buttons: {
        close: {
          text: "Close",
          btnClass: 'btn-blue',
          action: function() {
            return false;
          }
        }
      },
      onOpenBefore: function() {
        // before the modal is displayed.
        this.buttons.close.hide();
      },
    });
  } else { //not mobile    
    
    cleaned_list = assembleCleanedList();
    console.log(cleaned_list);
    console.log(window.expParam.practice_boxes);
    console.log(window.expParam.boxes);
    
    //set up data collection object
    window.expData = {};
    window.expData.preQuestions = [];
    window.expData.postQuestions = [];
    window.expData.trialData = [];
    window.expData.proID = getParameterByName('PROLIFIC_PID');

    window.blk = 0;

    //price quality order
    window.expData.pqOrder = (Math.random() < 0.5) ? "pFirst" : "qFirst";
    console.log("condition is "+window.expData.pqOrder);
    
    //which exclusion set
    window.expData.exclusionCount = 0;

    //randomization
    window.expData.randomOrder = [];
    var tmpList;
    for (var i = 0; i < window.expParam.boxes.length; i++) {
      tmpList = [];
      for (var j = 0; j < window.expParam.boxes[i].length; j++) {
        tmpList.push(j);
      }
      shuffle(tmpList);
      window.expData.randomOrder.push({
        set: i + window.expParam.practice_boxes.length,
        boxes: [...tmpList]
      });
    }
    // window.expParam.boxes = window.expParam.boxes.slice(0,2);
    // shuffle(window.expData.randomOrder);

    for (var i = window.expParam.practice_boxes.length - 1; i >= 0; i--) {
      tmpList = [];
      for (var j = 0; j < window.expParam.practice_boxes[i].length; j++) {
        tmpList.push(j);
      }
      shuffle(tmpList);
      window.expData.randomOrder.unshift({
        set: i,
        boxes: [...tmpList]
      });
      window.expParam.boxes.unshift(window.expParam.practice_boxes[i]);
    }

    preQuestions(0);
  }
});
